import numpy as np
import mnist

def load_mnist():
    training_images = mnist.train_images()
    training_labels = mnist.train_labels()
    test_images = mnist.test_images()
    test_labels = mnist.test_labels()

    training_images = np.reshape(training_images, (training_images.shape[0], 784))
    training_images = training_images / 255.0
    training_images = [np.reshape(x, (784, 1)) for x in training_images]
    
    test_images = np.reshape(test_images, (test_images.shape[0], 784))
    test_images = test_images / 255.0
    test_images = [np.reshape(x, (784, 1)) for x in test_images]

    training_labels = [vectorized_result(y) for y in training_labels]
    test_labels = [vectorized_result(y) for y in test_labels]

    training_data = list(zip(training_images, training_labels))
    test_data = list(zip(test_images, test_labels))

    return training_data, test_data

def vectorized_result(j):
    e = np.zeros((10, 1))
    e[j] = 1.0
    return e

def main():
    training_data, test_data = load_mnist()
    net = Network([784, 30, 10])
    net.SGD(training_data, epochs=30, mini_batch_size=10, eta=3.0, test_data=test_data)

if __name__ == "__main__":
    main()
